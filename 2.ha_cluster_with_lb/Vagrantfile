# -*- mode: ruby -*-
# vi: set ft=ruby :

ENV['VAGRANT_NO_PARALLEL'] = 'yes'

IP_RANGE = "172.16.16."

VAGRANT_BOX         = "centos/7"
VAGRANT_BOX_VERSION = "2004.01"

CPUS_MASTER_NODE    = 2
CPUS_WORKER_NODE    = 1

MEMORY_MASTER_NODE  = 2048
MEMORY_WORKER_NODE  = 1024

MASTER_NODES_COUNT  = 2
WORKER_NODES_COUNT  = 0

MASTER_NODE_NAME = "master-#{Time.now.strftime("%m-%d")}-"
WORKER_NODE_NAME = "worker-#{Time.now.strftime("%m-%d")}-"

MASTER_LOAD_BALANCER_IP = "#{IP_RANGE}#{210}"
WORKER_LOAD_BALANCER_IP = "#{IP_RANGE}#{220}"

IP_MASTER_LIST = (1..MASTER_NODES_COUNT).map do |i|
  "#{IP_RANGE}#{100+i} #{MASTER_NODE_NAME}#{i} #{MASTER_NODE_NAME}#{i}.example.com"
end.join(",")

IP_WORKER_LIST = (1..WORKER_NODES_COUNT).map do |i|
  "#{IP_RANGE}#{100+i} #{WORKER_NODE_NAME}#{i} #{WORKER_NODE_NAME}#{i}.example.com"
end.join(",")

Vagrant.configure(2) do |config|

  # Kubernetes Master Nodes
  (1..MASTER_NODES_COUNT).each do |i|

    config.vm.define "#{MASTER_NODE_NAME}#{i}" do |masternode|
      master_node_ip = "#{IP_RANGE}#{i}"
      masternode.vm.box               = VAGRANT_BOX
      masternode.vm.box_check_update  = false
      masternode.vm.box_version       = VAGRANT_BOX_VERSION
      masternode.vm.hostname          = "#{MASTER_NODE_NAME}#{i}.example.com"

      masternode.vm.network "private_network", ip: "#{IP_RANGE}#{100+i}"

      masternode.vm.provider :virtualbox do |v|
        v.name   = "#{MASTER_NODE_NAME}#{i}"
        v.memory = "#{MEMORY_MASTER_NODE}"
        v.cpus   = "#{CPUS_MASTER_NODE}"
        v.customize ["modifyvm", :id, "--groups", "/kubernetes"]
      end

      masternode.vm.provision "shell", path: "test.sh", env: { "VM_IPS" => IP_MASTER_LIST, "MASTER_LOAD_BALANCER_IP" => MASTER_LOAD_BALANCER_IP}
      masternode.vm.provision "shell", path: "test.sh", env: { "VM_IPS" => IP_WORKER_LIST, "WORKER_LOAD_BALANCER_IP" => WORKER_LOAD_BALANCER_IP}
      masternode.vm.provision "shell", path: "lb_setup.sh", env: {"VM_IPS" => IP_MASTER_LIST, "MASTER_LOAD_BALANCER_IP" => MASTER_LOAD_BALANCER_IP, "WORKER_LOAD_BALANCER_IP" => WORKER_LOAD_BALANCER_IP}
      # masternode.vm.provision "shell", path: "bootstrap.sh", env: {"MASTER_NODE_IP" => master_node_ip}
      # masternode.vm.provision "shell", path: "lb_master.sh", env: {"MASTER_NODE_IP" => master_node_ip}
      # masternode.vm.provision "shell", path: "bootstrap_kmaster.sh", env: {"MASTER_NODE_IP" => master_node_ip}

    end

  end

  # Kubernetes Worker Nodes
  (1..WORKER_NODES_COUNT).each do |i|

    config.vm.define "#{WORKER_NODE_NAME}#{i}" do |workernode|

      workernode.vm.box               = VAGRANT_BOX
      workernode.vm.box_check_update  = false
      workernode.vm.box_version       = VAGRANT_BOX_VERSION
      workernode.vm.hostname          = "#{WORKER_NODE_NAME}#{i}.example.com"

      workernode.vm.network "private_network", ip: "#{IP_RANGE}#{200+i}"

      workernode.vm.provider :virtualbox do |v|
        v.name    = "#{WORKER_NODE_NAME}#{i}"
        v.memory  = MEMORY_WORKER_NODE
        v.cpus    = CPUS_WORKER_NODE
        v.customize ["modifyvm", :id, "--groups", "/kubernetes"]
      end

      workernode.vm.provision "shell", path: "test.sh", env: { "VM_IPS" => IP_MASTER_LIST, "MASTER_LOAD_BALANCER_IP" => MASTER_LOAD_BALANCER_IP}
      workernode.vm.provision "shell", path: "test.sh", env: { "VM_IPS" => IP_WORKER_LIST, "WORKER_LOAD_BALANCER_IP" => WORKER_LOAD_BALANCER_IP}
      # node.vm.provision "shell", path: "bootstrap.sh"
      # node.vm.provision "shell", path: "bootstrap_kworker.sh"
      # node.vm.provision "shell", path: "lb_worker.sh"

    end

  end

end
